// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/foreverd34d/poster-graphql/graph/model"
	mock "github.com/stretchr/testify/mock"
)

// Post is an autogenerated mock type for the Post type
type Post struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ctx, newPost
func (_m *Post) CreatePost(ctx context.Context, newPost model.NewPost) (*model.Post, error) {
	ret := _m.Called(ctx, newPost)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.NewPost) (*model.Post, error)); ok {
		return rf(ctx, newPost)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.NewPost) *model.Post); ok {
		r0 = rf(ctx, newPost)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.NewPost) error); ok {
		r1 = rf(ctx, newPost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPosts provides a mock function with given fields: ctx, offset, limit
func (_m *Post) GetAllPosts(ctx context.Context, offset *int, limit *int) ([]*model.Post, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPosts")
	}

	var r0 []*model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *int, *int) ([]*model.Post, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *int, *int) []*model.Post); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *int, *int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostById provides a mock function with given fields: ctx, id
func (_m *Post) GetPostById(ctx context.Context, id string) (*model.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostById")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPost creates a new instance of Post. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPost(t interface {
	mock.TestingT
	Cleanup(func())
}) *Post {
	mock := &Post{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
