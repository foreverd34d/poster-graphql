// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/foreverd34d/poster-graphql/graph/model"
	mock "github.com/stretchr/testify/mock"
)

// Comment is an autogenerated mock type for the Comment type
type Comment struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, newComment
func (_m *Comment) CreateComment(ctx context.Context, newComment model.NewComment) (*model.Comment, error) {
	ret := _m.Called(ctx, newComment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.NewComment) (*model.Comment, error)); ok {
		return rf(ctx, newComment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.NewComment) *model.Comment); ok {
		r0 = rf(ctx, newComment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.NewComment) error); ok {
		r1 = rf(ctx, newComment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComment creates a new instance of Comment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Comment {
	mock := &Comment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
